<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.18.3">

    
  <!-- Spot Style - Default Point Spot Style 1 -->
  <style name="IconDefaultPointSpotStyle1"
         url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint0.png"
         visible="false"
         onhover="onhoverIconDefaultPointSpotStyle1"
         onout="onoutIconDefaultPointSpotStyle1"
         />
  <action name="onhoverIconDefaultPointSpotStyle1">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle1">
    hideTooltip();



  </action>



<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->
<plugin name="gyroscope"
        url="graphics/gyro.js"
        keep="true"
        devices="no-desktop.and.html5"


        friction="0.5"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    ifnot (plugin[gyroscope].available === undefined, 
      if (plugin[gyroscope].available,
        if(scene[get(xml.scene)].planar,
          if(plugin[gyroscope].enabled,
            switch(plugin[gyroscope].enabled);
            if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
          );
        ,
          if(plugin[gyroscope].activated,
            ifnot(plugin[gyroscope].enabled,
              switch(plugin[gyroscope].enabled);
              if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
            );
          );
        );
      );
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    ifnot (plugin[gyroscope].available === undefined,
      if (plugin[gyroscope].available,
        if(%1,
          set(plugin[gyroscope].activated,true);
        ,
          set(plugin[gyroscope].activated,false);
        );
        if (%1 !=  plugin[gyroscope].enabled,
          if(plugin[gyroscope].activated,
            switch(plugin[gyroscope].enabled);
          ,
            set(plugin[gyroscope].enabled, false);
          );
          if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
        );
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    ifnot (plugin[gyroscope].available === undefined, 
      if (plugin[gyroscope].available,
        ifnot(scene[get(xml.scene)].planar,
          switch(plugin[gyroscope].enabled);
          set(plugin[gyroscope].activated,true);
        );
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        set(tour_gyroscopedevices, false);
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  );
</action>

  <!-- ************************ -->
  <!-- Title : current panorama -->
  <!-- ************************ -->

  <events name="title_currentpanorama_events" 
    onTourStart="showtitle_currentpanorama();"
    onnewpano="updatetitle_currentpanorama();" 
    keep="true" />

  <action name="showtitle_currentpanorama">set(layer[title_currentpanorama].visible, true );</action>

  <action name="updatetitle_currentpanorama">
    getmessage(layer[title_currentpanorama].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title_currentpanorama].html);
  </action>
  <layer name="title_currentpanorama" keep="true" zorder="1"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="bottom" x="0" y="0" width="100%" autoheight="true"
         background="false" capture="false" handcursor="false" selectable="false" enabled="false"
         borderwidth="0"
         alpha="1"
         visible="false"
         css="text-align:center;
              color:#ffffff;
              font-family:Arial;
              font-weight:bold;
              font-size:28px;"/>

  <!-- ************* -->
  <!-- Panorama Menu -->
  <!-- ************* -->

<ptplugin name="panoramaMenu" engine="kolorMenu">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="orientation" value="horizontal" type="string" />
		<option name="sub_orientation" value="vertical" type="string" />
		<option name="margin_x" value="5" type="int" />
		<option name="margin_y" value="5" type="int" />
		<option name="background_color" value="b3b3b3" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="item_spacer" value="3" type="int" />
		<option name="border_radius" value="5" type="int" />
		<option name="full_size" value="false" type="bool" />
		<option name="use_out_effect" value="true" type="bool" />
		<option name="item_out_border_radius" value="5" type="int" />
		<option name="item_hover_border_radius" value="5" type="int" />
		<option name="item_out_border_width" value="0" type="int" />
		<option name="item_hover_border_width" value="0" type="int" />
		<option name="item_out_bg_color" value="b3b3b3" type="string" />
		<option name="item_out_bg_alpha" value="1" type="float" />
		<option name="item_out_font_color" value="ffffff" type="string" />
		<option name="item_out_font_family" value="Arial" type="string" />
		<option name="item_out_font_size" value="10" type="int" />
		<option name="item_out_font_weight" value="normal" type="string" />
		<option name="item_out_font_style" value="normal" type="string" />
		<option name="item_out_font_decoration" value="normal" type="string" />
		<option name="use_hover_effect" value="true" type="bool" />
		<option name="item_hover_bg_color" value="d7d7d7" type="string" />
		<option name="item_hover_bg_alpha" value="1" type="float" />
		<option name="item_hover_font_color" value="ffffff" type="string" />
		<option name="item_hover_font_family" value="Arial" type="string" />
		<option name="item_hover_font_size" value="10" type="int" />
		<option name="item_hover_font_weight" value="normal" type="string" />
		<option name="item_hover_font_style" value="normal" type="string" />
		<option name="item_hover_font_decoration" value="normal" type="string" />
		<option name="item_selected_color" value="5b5b5b" type="string" />
		<option name="item_selected_alpha" value="1" type="string" />
		<option name="open_callback" value="invokeKrFunction('changeSelectedItem-panoramaMenu');" type="string" />
		<option name="text_align" value="right" type="string" />
		<option name="item_thumb_max_width" value="200" type="int" />
		<option name="item_thumb_max_height" value="100" type="int" />
		<option name="zorder" value="2" type="int" />
	</settings>
	<internaldata>
				<group name="group_1"
						titleID="panogroup18_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup18"> 

				
						<item name="group_1_item_1" 
								titleID="pano9_title" 
								action="invokeKrFunction('mainloadscene', 'pano9')"
								thumbnail=""
								cssClass="pano9">
						</item>
				
				</group>
				<group name="group_2"
						titleID="panogroup19_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup19"> 

				
						<item name="group_2_item_1" 
								titleID="pano10_title" 
								action="invokeKrFunction('mainloadscene', 'pano10')"
								thumbnail=""
								cssClass="pano10">
						</item>
				
				</group>
				<group name="group_3"
						titleID="panogroup20_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup20"> 

				
						<item name="group_3_item_1" 
								titleID="pano11_title" 
								action="invokeKrFunction('mainloadscene', 'pano11')"
								thumbnail=""
								cssClass="pano11">
						</item>
				
				</group>
				<group name="group_4"
						titleID="panogroup21_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup21"> 

				
						<item name="group_4_item_1" 
								titleID="pano12_title" 
								action="invokeKrFunction('mainloadscene', 'pano12')"
								thumbnail=""
								cssClass="pano12">
						</item>
				
				</group>
				<group name="group_5"
						titleID="panogroup22_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup22"> 

				
						<item name="group_5_item_1" 
								titleID="pano13_title" 
								action="invokeKrFunction('mainloadscene', 'pano13')"
								thumbnail=""
								cssClass="pano13">
						</item>
				
				</group>
				<group name="group_6"
						titleID="panogroup23_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup23"> 

				
						<item name="group_6_item_1" 
								titleID="pano14_title" 
								action="invokeKrFunction('mainloadscene', 'pano14')"
								thumbnail=""
								cssClass="pano14">
						</item>
				
				</group>
				<group name="group_7"
						titleID="panogroup24_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup24"> 

				
						<item name="group_7_item_1" 
								titleID="pano15_title" 
								action="invokeKrFunction('mainloadscene', 'pano15')"
								thumbnail=""
								cssClass="pano15">
						</item>
				
				</group>
				<group name="group_8"
						titleID="panogroup25_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup25"> 

				
						<item name="group_8_item_1" 
								titleID="pano16_title" 
								action="invokeKrFunction('mainloadscene', 'pano16')"
								thumbnail=""
								cssClass="pano16">
						</item>
				
				</group>
				<group name="group_9"
						titleID="panogroup26_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup26"> 

				
						<item name="group_9_item_1" 
								titleID="pano17_title" 
								action="invokeKrFunction('mainloadscene', 'pano17')"
								thumbnail=""
								cssClass="pano17">
						</item>
				
				</group>
	</internaldata>
</ptplugin>

<action name="kolorMenuJsReady-panoramaMenu">
	set(ptplugin[panoramaMenu].jsready, true);
</action>

<action name="showKolorMenu-panoramaMenu">
	
	ifnot(ptplugin[panoramaMenu].isOpen,
		set(ptplugin[panoramaMenu].isOpen, true);
		js(openKolorMenu(panoramaMenu));
	,
		if(ptplugin[panoramaMenu].jsready,
			js(invokePluginFunction(panoramaMenu, showKolorMenu));
		);
	);
</action>

<action name="hideKolorMenu-panoramaMenu">
	if(ptplugin[panoramaMenu].jsready,
		js(invokePluginFunction(panoramaMenu, hideKolorMenu));
	);
</action>

<action name="changeSelectedItem-panoramaMenu">
	js(invokePluginFunction(panoramaMenu, changeSelectedItem, get(xml.scene)));
</action>

<events name="kolorMenuEvents-panoramaMenu" 
	keep="true"
	
	
	onTourStart="showKolorMenu-panoramaMenu();"
	hidetourcontrols="hideKolorMenu-panoramaMenu();"
	showtourcontrols="showKolorMenu-panoramaMenu();"
	onnewpano="changeSelectedItem-panoramaMenu();"
/>

</krpano>